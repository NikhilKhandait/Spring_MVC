package com.rays.dao;


import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Repository;


import com.rays.dto.UserDTO;

@Repository
public class UserDAO {

	@Autowired
	SessionFactory sessionFactory;

	public long add(UserDTO dto) {

		long pk = (long) sessionFactory.getCurrentSession().save(dto);
		return pk;
	}

	public void update(UserDTO dto) {

		sessionFactory.getCurrentSession().saveOrUpdate(dto);
	}

	public UserDTO delete(long id) throws DataAccessException {
		UserDTO dto = findByPk(id);
		sessionFactory.getCurrentSession().delete(dto);
		return dto;
	}

	public UserDTO authenticate(String login, String password) {

		Query q = sessionFactory.getCurrentSession().createQuery("from st_user where login =? and password = ?");

		q.setString(0, login);
		q.setString(1, password);

		List list = q.list();
		UserDTO dto = null;
		if (list.size() > 0) {
			dto = (UserDTO) list.get(0);
		}
		return dto;
	}

	public UserDTO findByPk(long pk) {

		UserDTO dto = sessionFactory.getCurrentSession().get(UserDTO.class, pk);
		return dto;
	}

	public UserDTO findByLogin(String login) {

		Criteria criteria = sessionFactory.getCurrentSession().createCriteria(UserDTO.class);

		criteria.add(Restrictions.ilike("login", login));

		List list = criteria.list();

		UserDTO dto = new UserDTO();
		if (list != null) {
			dto = (UserDTO) list.get(0);

		}
		return dto;

	}

	public List search(UserDTO dto, int pageNo, int pageSize) {

		Criteria criteria = sessionFactory.getCurrentSession().createCriteria(UserDTO.class);

		if (dto != null) {
			if (dto.getId() > 0) {
				criteria.add(Restrictions.eq("id", dto.getId()));

			}

			if (dto.getFirstName() != null && dto.getFirstName().length() > 0) {
				criteria.add(Restrictions.like("firstName", dto.getFirstName() + "%"));
			}

			if (dto.getLastName() != null && dto.getLastName().length() > 0) {
				criteria.add(Restrictions.like("lastName", dto.getLastName() + "%"));
			}
		}
			if (pageNo > 0) {
				
			pageNo = (pageNo - 1) * pageSize;
			criteria.setFirstResult(pageNo);
			criteria.setMaxResults(pageSize);
			}
		
		List list = criteria.list();
		return list;

	}

}
